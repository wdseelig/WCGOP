<?php

/**
 * @file
 * Provides MovableType services for BlogAPI
 */

/**
 * Implements hook_blogapi_info().
 */
function blogapi_movabletype_blogapi_info() {
  return array(
    'api_version' => 2,
    'type' => 'xmlrpc',
    'name' => 'MovableType',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function blogapi_movabletype_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "services" && $api == "services") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_services_resources().
 */
function blogapi_movabletype_services_resources() {
  return array(
    'mt' => array(
      'actions' => array(
        'publishPost' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_publish_post',
          'enabled' => 1,
          'help' => 'Publish (rebuild) all of the static files related to an entry from your blog. Equivalent to saving an entry in the system (but without the ping).',
          'args' => array(
            array(
              'name' => 'postid',
              'type' => 'int',
              'description' => 'PostID',
              'source' => array('data' => 'postid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'username'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array('data' => 'password'),
              'optional' => FALSE,
            ),
          ),
        ),
        'getRecentPostTitles' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_get_recent_post_titles',
          'enabled' => 1,
          'help' => 'Returns a bandwidth-friendly list of the most recent posts in the system.',
          'args' => array(
            array(
              'name' => 'blogid',
              'type' => 'string',
              'description' => 'blogid',
              'source' => array('data' => 'blogid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'username'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array('data' => 'password'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'number_of_posts',
              'type' => 'int',
              'description' => 'Number of posts',
              'source' => array('data' => 'number_of_posts'),
              'optional' => FALSE,
            ),
          ),
        ),
        'getCategoryList' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_get_category_list',
          'enabled' => 1,
          'help' => 'Returns a list of all categories defined in the blog.',
          'args' => array(
            array(
              'name' => 'blogid',
              'type' => 'string',
              'description' => 'blogid',
              'source' => array('data' => 'blogid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'username'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array('data' => 'password'),
              'optional' => FALSE,
            ),
          ),
        ),
        'getPostCategories' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_get_post_categories',
          'enabled' => 1,
          'help' => 'Returns a list of all categories to which the post is assigned.',
          'args' => array(
            array(
              'name' => 'blogid',
              'type' => 'string',
              'description' => 'blogid',
              'source' => array('data' => 'blogid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'username'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array('data' => 'password'),
              'optional' => FALSE,
            ),
          ),
        ),
        'setPostCategories' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_set_post_categories',
          'enabled' => 1,
          'help' => 'Sets the categories for a post.',
          'args' => array(
            array(
              'name' => 'postid',
              'type' => 'int',
              'description' => 'postid',
              'source' => array('data' => 'postid'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'username',
              'type' => 'string',
              'description' => 'A valid username',
              'source' => array('data' => 'username'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'password',
              'type' => 'string',
              'description' => 'A valid password',
              'source' => array('data' => 'password'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'categories',
              'type' => 'array',
              'description' => 'categories',
              'source' => array('data' => 'categories'),
              'optional' => FALSE,
            ),
          ),
        ),
        'supportedMethods' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_supported_methods',
          'enabled' => 1,
          'help' => 'Retrieve information about the XML-RPC methods supported by the server.',
        ),
        'supportedTextFilters' => array(
          'access callback' => 'services_access_menu',
          'callback' => 'blogapi_movabletype_supported_text_filters',
          'enabled' => 1,
          'help' => 'Retrieve information about the text formatting plugins supported by the server.',
        ),
      ),
    ),
  );
}

/**
 * Service callback for mt.publishPost
 */
function blogapi_movabletype_publish_post($postid, $username, $password) {

  $user = blogapi_validate_user($username, $password);

  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  $node = node_load($postid);
  if (!$node) {
    return services_error(t('Post @postid not found', array('@postid' => $postid)), 404);
  }

  // Nothing needs to be done: the node is already published.
  if ($node->status == 1) {
    return;
  }

  if (!node_access('update', $node, $user) || !user_access('administer nodes')) {
    // User does not have permission to update the node.
    return services_error(t('You are not authorized to update post @postid', array('@postid' => $postid)), 403);
  }

  // If everything checks out, then go ahead and update the node.
  $node->status = 1;
  node_save($node);

  return TRUE;
}

/**
 * Service callback for mt.getRecentPostTitles
 */
function blogapi_movabletype_get_recent_post_titles($blogid, $username, $password, $number_of_posts) {

  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  // Validate the content type.
  $error = blogapi_validate_content_type($blogid);
  if ($error !== TRUE) {
    // Return an error if the content type is not configured for use
    // with BlogAPI.
    return services_error($error['message'], $error['error_code']);
  }

  // Get posts.
  $blogs = blogapi_get_recent_posts($blogid, $user, $number_of_posts);

  $posts = array();
  foreach ($blogs as $blog) {
    $posts[] = blogapi_format_post_for_xmlrpc($blog, FALSE);
  }

  return $posts;
}

/**
 * Service callback for mt.getCategoryList
 */
function blogapi_movabletype_get_category_list($blogid, $username, $password) {

  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  if (($error = blogapi_validate_content_type($blogid)) !== TRUE) {
    // Return an error if not configured type.
    return services_error($error['message'], $error['error_code']);
  }

  $vocabularies = module_invoke('taxonomy', 'get_vocabularies', $blogid, 'vid');
  $categories = array();
  if ($vocabularies) {
    foreach ($vocabularies as $vocabulary) {
      $terms = module_invoke('taxonomy', 'get_tree', $vocabulary->vid);
      foreach ($terms as $term) {
        $term_name = $term->name;
        foreach (module_invoke('taxonomy', 'get_parents', $term->tid, 'tid') as $parent) {
          $term_name = $parent->name . '/' . $term_name;
        }
        $categories[] = array('categoryName' => $term_name, 'categoryId' => $term->tid);
      }
    }
  }

  return $categories;
}

/**
 * Service callback for mt.getPostCategories
 */
function blogapi_movabletype_get_post_categories($postid, $username, $password) {

  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  $node = node_load($postid);
  if (!node_access('view', $node, $user) || !user_access('administer nodes')) {
    // User does not have permission to view the node.
    return services_error(t('You are not authorized to view post @postid', array('@postid' => $postid)), 403);
  }

  $terms = module_invoke('taxonomy', 'node_get_terms', $node, 'tid');
  $categories = array();
  foreach ($terms as $term) {
    $term_name = $term->name;
    foreach (module_invoke('taxonomy', 'get_parents', $term->tid, 'tid') as $parent) {
      $term_name = $parent->name . '/' . $term_name;
    }
    $categories[] = array('categoryName' => $term_name, 'categoryId' => $term->tid, 'isPrimary' => TRUE);
  }

  return $categories;
}

/**
 * Service callback for mt.setPostCategories
 */
function blogapi_movabletype_set_post_categories($postid, $username, $password, $categories) {

  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  $node = node_load($postid);
  if (!node_access('update', $node, $user) || !user_access('administer nodes')) {
    // User does not have permission to update the node.
    return services_error(t('You are not authorized to view post @postid', array('@postid' => $postid)), 403);
  }

  $node->taxonomy = array();
  foreach ($categories as $category) {
    $node->taxonomy[] = $category['categoryId'];
  }

  $validated = blogapi_validate_terms($node);
  if ($validated !== TRUE) {
    return services_error($validated['message'], $validated['error_code']);
  }

  node_save($node);
  return TRUE;
}

/**
 * Service callback for mt.supportedMethods
 *
 * @todo: Implement this function? system.getMethods returns the same thing,
 *        so we may not need to bother with this.
 */
function blogapi_movabletype_supported_methods() {
  return services_error(t('Not implemented'), 501);
}

/**
 * Service callback for mt.supportedTextFilters
 */
function blogapi_movabletype_supported_text_filters() {
  // NOTE: we're only using anonymous' formats because the MT spec
  // does not allow for per-user formats.
  $formats = filter_formats();

  $filters = array();
  foreach ($formats as $format) {
    $filter['key'] = $format->format;
    $filter['label'] = $format->name;
    $filters[] = $filter;
  }

  return $filters;
}

/**
 * Handles extra information sent by clients according to MovableType's spec.
 */
function _blogapi_mt_extra(&$node, $struct) {
  if (is_array($node)) {
    $was_array = TRUE;
    $node = (object)$node;
  }

  if (array_key_exists('mt_allow_comments', $struct)) {
    switch ($struct['mt_allow_comments']) {
      case 0:
        $node->comment = COMMENT_NODE_HIDDEN;
        break;
      case 1:
        $node->comment = COMMENT_NODE_OPEN;
        break;
      case 2:
        $node->comment = COMMENT_NODE_CLOSED;
        break;
    }
  }

  // Merge the 3 body sections (description, mt_excerpt, mt_text_more) into one body.
  if (isset($struct['mt_excerpt'])) {
    $node->body[LANGUAGE_NONE][0]['value'] = $struct['mt_excerpt'] . '<!--break-->' . $node->body[LANGUAGE_NONE][0]['value'];
  }
  if (isset($struct['mt_text_more'])) {
    $node->body[LANGUAGE_NONE][0]['value'] = $node->body[LANGUAGE_NONE][0]['value'] . '<!--extended-->' . $struct['mt_text_more'];
  }

  if (isset($struct['mt_convert_breaks'])) {
    $node->body[LANGUAGE_NONE][0]['format'] = $struct['mt_convert_breaks'];
  }

  if (isset($struct['dateCreated'])) {
    $node->date = format_date(mktime($struct['dateCreated']->hour, $struct['dateCreated']->minute, $struct['dateCreated']->second, $struct['dateCreated']->month, $struct['dateCreated']->day, $struct['dateCreated']->year), 'custom', 'Y-m-d H:i:s O');
  }

  if ($was_array) {
    $node = (array)$node;
  }
}
