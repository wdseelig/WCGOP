<?php

/**
 * @file
 * Endpoint tests for BlogAPI Blogger
 */
class BlogapiBloggerEndpointTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $privilegedUser;
  protected $privilegedUser2;
  protected $xmlrpcUrl;

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Blogger Endpoint Tests'),
      'description' => t('Run tests for Blogger endpoints') ,
      'group' => t('BlogAPI'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp(array(
      'blogapi',
      'blogapi_blogger',
      'filter',
      'services',
      'xmlrpc_server',
    ));

    // Get the URL of the XML-RPC endpoint.
    $this->xmlrpcUrl = url('blogapi/xmlrpc', array('absolute' => TRUE));

    // Create a user with appropriate permissions.
    $this->privilegedUser = $this->drupalCreateUser(array('manage content with blogapi'));
    $this->privilegedUser->mail = 'test@example.com';
    $this->privilegedUser->name = 'Test user';
    user_save($this->privilegedUser);

    // Create another user with more permissions.
    $this->privilegedUser2 = $this->drupalCreateUser(array('manage content with blogapi', 'bypass node access', 'administer nodes'));
    $this->privilegedUser2->mail = 'test@example.com';
    $this->privilegedUser2->name = 'Test user2';
    user_save($this->privilegedUser2);
  }

  /**
   * Test blogger.getUsersBlogs().
   */
  public function testGetUsersBlogs() {
    // Get the username and password for use in XML-RPC calls.
    $username = $this->privilegedUser->name;
    $password = $this->privilegedUser->pass_raw;

    // Test blog type retrieval before creating and configuring node types.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array('1234567890', $username, $password),
    ));
    $this->assertEqual(count($blog_types), 0, t('No blog types exist and none were returned'));

    // Create a content type and re-test. No types should be returned
    // because the content type is not configured for use with BlogAPI.
    $type = $this->drupalCreateContentType();
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array('1234567890', $username, $password),
    ));
    $this->assertEqual(count($blog_types), 0, t('No blog types are configured and none were returned'));

    // Add the new content type to the blog list and make sure that it's
    // returned correctly.
    variable_set('blogapi_node_types', array($type->type));
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array('1234567890', $username, $password),
    ));
    $this->assertEqual(count($blog_types), 1, t('One blog type is configured and one was returned'));
    $this->assertEqual($blog_types[0]['blogid'], $type->type, t('The configured blog type is the one that was returned'));
    $this->assertEqual($blog_types[0]['blogName'], $username . ': ' . $type->name, t('The blogName is returned correctly.'));
  }

  /**
   * Test blogger.getUserInfo().
   */
  public function testGetUserInfo() {
    // Get the username and password for use in XML-RPC calls.
    $username = $this->privilegedUser->name;
    $password = $this->privilegedUser->pass_raw;

    $user_info = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUserInfo' => array('1234567890', $username, $password),
    ));

    // Make sure all this data is correct.
    $this->assertEqual($user_info['userid'], 2, t('Returned data has correct userid'));
    $this->assertEqual($user_info['firstname'], 'Test', t('Returned data has correct username'));
    $this->assertEqual($user_info['lastname'], 'user', t('Returned data has correct lastname'));
    $this->assertEqual($user_info['nickname'], $username, t('Returned data has correct nickname'));
    $this->assertEqual($user_info['email'], 'test@example.com', t('Returned data has correct email.'));
    $this->assertEqual($user_info['url'], url('user/2', array('absolute' => TRUE)), t('Returned data has correct URL'));
  }

  /**
   * Test blogger.newPost()
   */
  public function testNewPost() {
    // Get the username and password for use in XML-RPC calls.
    $username = $this->privilegedUser->name;
    $password = $this->privilegedUser->pass_raw;

    $content = '<title>Test post</title>Lorem ipsum dolor sit amet, consectetur
      lorem dui, molestie a porttitor vitae, dapibus id augue. Mauris sit amet
      lorem ipsum, ac vehicula mauris. Nunc purus dui, ultrices sed faucibus in,
      commodo id justo. Phasellus pretium ipsum in velit lacinia adipiscing
      semper turpis molestie. Sed vel enim ut massa placerat fringilla. Nam
      ultricies felis ut eros sodales consequat. Donec et justo nisl, in blandit
      nibh. Sed luctus, nunc ut scelerisque consectetur, massa tortor vehicula
      sapien, sit amet fermentum mauris velit sit amet sem.';

    // Create a content type.
    $type = $this->drupalCreateContentType();
    variable_set('blogapi_node_types', array($type->type));

    // Try to create the node. This should fail because the user does not have
    // permission to create this content type.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $type->type,
        $username,
        $password,
        $content,
        TRUE
      ),
    ));
    $this->assertEqual(xmlrpc_error_msg(), 'You do not have permission to create this type of post.',
      t('Node access is being respected.'));

    // Create the node. This should work because the user has administer nodes.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE,
      ),
    ));

    // Load the node and validate the data.
    $node = node_load($nid[0]);
    $this->assertEqual($node->title, 'Test post', t('New node title is set correctly.'));
    $this->assertEqual($node->status, 1, t('New node is published'));
  }

  /**
   * Test blogger.editPost().
   */
  public function testEditPost() {

  }

  /**
   * Test blogger.getPost().
   */
  public function testGetPost() {

  }

  /**
   * Test blogger.deletePost().
   */
  public function testDeletePost() {

  }

  /**
   * Test blogger.getRecentPosts().
   */
  public function testGetRecentPosts() {

  }
}
